
layout (triangles, fractional_odd_spacing, ccw) in;

uniform sampler2D displacement;
uniform mat4 viewProj;

// in vec4 tess_fragPos[];
in vec3 tess_fragNormal[];
in vec4 tess_fragTangent[];
in vec2 tess_texCoord[];

out vec4 fragPos;
out vec3 fragNormal;
out vec2 texCoord;

// https://github.com/assimp/assimp/blob/master/code/PostProcessing/CalcTangentsProcess.cpp
void computeBasis(vec3 p0, vec3 p1, vec3 p2, vec2 u0, vec2 u1, vec2 u2, out vec3 tangent, out vec3 bitangent)
{
  vec3 v = (p1 - p0);
  vec3 w = (p2 - p0);
  vec2 s = u1 - u0;
  vec2 t = u2 - u0;

  float dirCorrect = (t.x * s.y - t.y * s.x) < 0 ? -1 : 1;
  if (s.x * t.y == s.y * t.x)
  {
    s = vec2(0, 1);
    t = vec2(1, 0);
  }

  tangent = (w * s.y - v * t.y) * dirCorrect;
  bitangent = (w * s.x - v * t.x) * dirCorrect;
}

void main()
{
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;

    vec2 t0 = tess_texCoord[0];
    vec2 t1 = tess_texCoord[1];
    vec2 t2 = tess_texCoord[2];

    texCoord = t0 * u + t1 * v + t2 * w;

    // flip uv
    // texCoord.y = 1 - texCoord.y;

    float heightStrength = 0.05;
    float height = texture(displacement, texCoord).r * heightStrength;

    float t = 0.005;
    float dx = ((texture(displacement, texCoord + vec2(t, 0)).r - texture(displacement, texCoord - vec2(t, 0)).r) / (2 * t)) * heightStrength;
    // float dx = ((texture(displacement, texCoord + vec2(t, 0)).r * heightStrength - height) / t);
    float dy = ((texture(displacement, texCoord + vec2(0, t)).r - texture(displacement, texCoord - vec2(0, t)).r) / (2 * t)) * heightStrength;
    // float dy = ((texture(displacement, texCoord + vec2(0, t)).r * heightStrength - height) / t);
    
    // flip uv
    // dy *= -1;

    vec4 p0 = gl_in[0].gl_Position;
    vec4 p1 = gl_in[1].gl_Position;
    vec4 p2 = gl_in[2].gl_Position;

    vec3 n0 = tess_fragNormal[0];
    vec3 n1 = tess_fragNormal[1];
    vec3 n2 = tess_fragNormal[2];

    vec3 normal = normalize(n0 * u + n1 * v + n2 * w);

    vec4 tg0 = tess_fragTangent[0];
    vec4 tg1 = tess_fragTangent[1];
    vec4 tg2 = tess_fragTangent[2];
    float bitangentSign = tg0.w;

    vec3 tangent = normalize(tg0.xyz * u + tg1.xyz * v + tg2.xyz * w);

    vec3 bitangent = normalize(cross(normal, tangent)) * bitangentSign;

    mat3 TBN = mat3(tangent, bitangent, normal);

    vec3 displaceTangent = normalize(vec3(1.0, 0.0, dx));
    vec3 displaceBitangent = normalize(vec3(0.0, 1.0, dy));
    vec3 displaceNormal = normalize(cross(displaceTangent, displaceBitangent));

    vec4 p = p0 * u + p1 * v + p2 * w;
    p.xyz += normal.xyz * height;

    // recalc normal
    normal = normalize(TBN * displaceNormal);

    fragNormal = normal.xyz;

    fragPos = p;
    gl_Position = viewProj * p;
}
	